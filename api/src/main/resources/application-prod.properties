# ----------------------------------------------------
# 1. CONFIGURAÇÃO BÁSICA
# ----------------------------------------------------

# O perfil já está ativo via variável de ambiente, mas definir aqui garante clareza.
# spring.profiles.active=prod

# Define o nome da aplicação (útil para logs e monitoramento)
spring.application.name=retinoblastoma-api-prod

logging.level.root=DEBUG

# ----------------------------------------------------
# 2. CONFIGURAÇÃO DO BANCO DE DADOS (DataSource)
# ----------------------------------------------------

# URL ÚNICA DE CONEXÃO:
# O Railway injeta a variável DATABASE_URL, que contém host, porta,
# usuário e senha. Isso substitui a necessidade de PGHOST, PGUSER, etc.
spring.datasource.url=jdbc:postgresql://${PGHOST}:${PGPORT}/${PGDATABASE}
spring.datasource.username=${PGUSER}
spring.datasource.password=${PGPASSWORD}

# Driver: Garante o uso do driver PostgreSQL (embora o Spring Boot geralmente detecte isso)
spring.datasource.driver-class-name=org.postgresql.Driver

# ----------------------------------------------------
# 3. CONFIGURAÇÃO DO JPA/HIBERNATE
# ----------------------------------------------------

# DDL-AUTO:
# Em produção, o ideal é usar 'update' para que o Hibernate atualize o schema
# conforme as entidades evoluem. Se o banco de dados já estiver estável,
# mude para 'none' para maior segurança e desempenho.
spring.jpa.hibernate.ddl-auto=create

# SHOW SQL: Desativa a exibição de comandos SQL no console.
# Essencial para desempenho e limpeza do log em produção.
spring.jpa.show-sql=false

# DIALECT: Especifica o dialeto correto para o PostgreSQL.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Tamanho do pool de conexões.
# Ajuste conforme a carga, mas este é um bom padrão para começar.
spring.datasource.hikari.maximum-pool-size=10